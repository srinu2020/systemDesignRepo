# Real-Time Chat System - System Design

## ðŸ“Œ Functional Requirements

- 1-to-1 Messaging
- Real-time updates (no refresh)
- Typing indicators
- Online/offline status

## ðŸ§± Components

- Client (React)
- Backend (Node.js + WebSocket)
- Redis Pub/Sub
- Optional: Load Balancer + Sticky Sessions

## ðŸ§° Tech Stack

- Frontend: React + Socket.io-client
- Backend: Node.js + Express + WebSocket (or Socket.io)
- Redis: For pub/sub between instances
- Nginx: For load balancing

## ðŸ“ˆ Scaling Strategy

- Stateless WebSocket servers
- Redis pub/sub for sync
- Nginx for traffic routing
